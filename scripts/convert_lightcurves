#!/usr/bin/env python

__author__ = 'Eve Chase <eachase@lanl.gov>'

from astropy import units as u
from astropy.cosmology import Planck18_arXiv_v2, z_at_value
import argparse
import glob
import numpy as np
import pandas as pd

from cocteau import observations, filereaders, matrix

# FIXME: find a better way to incorporate this into filereaders
band_files = {
    'SIBEX':  ['norm', 'SIBEX_UV.dat'],
    'u-band': ['norm', 'u_LSST.dat'],
    'g-band': ['norm', 'g_LSST.dat'],
    'r-band': ['norm', 'r_LSST.dat'],
    'i-band': ['norm', 'i_LSST.dat'],
    'z-band': ['norm', 'z_LSST.dat'],
    'y-band': ['norm', 'y_LSST.dat'],
    'J-band': ['tab',  'J_2MASS.dat'],
    'H-band': ['tab',  'H_2MASS.dat'],
    'K-band': ['tab',  'K_2MASS.dat'],
    'UVW2'  : ['norm', 'Swift_UVOT.UVW2.dat'],
    'GeminiR': ['norm', 'Gemini_GMOS-N.r.dat'],
    'F606W' : ['norm', 'HST_ACS_WFC.F606W.dat'],
    'F125W' : ['norm', 'HST_WFC3_IR.F125W.dat'],
    'F160W' : ['norm', 'HST_WFC3_IR.F160W.dat'],
    'F070W' : ['norm', 'JWST/JWST_NIRCam.F070W.dat'], 
    'F090W' : ['norm', 'JWST/JWST_NIRCam.F090W.dat'], 
    'F115W' : ['norm', 'JWST/JWST_NIRCam.F115W.dat'], 
    'F140M' : ['norm', 'JWST/JWST_NIRCam.F140M.dat'], 
    'F150W' : ['norm', 'JWST/JWST_NIRCam.F150W.dat'], 
    'F200W' : ['norm', 'JWST/JWST_NIRCam.F200W.dat'],
    'F277W' : ['norm', 'JWST/JWST_NIRCam.F277W.dat'],
    'F356W' : ['norm', 'JWST/JWST_NIRCam.F356W.dat'],
    'F444W' : ['norm', 'JWST/JWST_NIRCam.F444W.dat'], 
    'F480M' : ['norm', 'JWST/JWST_NIRCam.F480M.dat'],
    'F560W': ['norm', 'JWST/JWST_MIRI.F560W.dat'],
    'F770W': ['norm', 'JWST/JWST_MIRI.F770W.dat'],
    'F1000W': ['norm', 'JWST/JWST_MIRI.F1000W.dat'],
    'F1280W': ['norm', 'JWST/JWST_MIRI.F1280W.dat'],
    'F1500W': ['norm', 'JWST/JWST_MIRI.F1500W.dat'],
    'F1800W': ['norm', 'JWST/JWST_MIRI.F1800W.dat'],
    'F2100W': ['norm', 'JWST/JWST_MIRI.F2100W.dat'],
    'F2550W': ['norm', 'JWST/JWST_MIRI.F2550W.dat'],
    'RomanR': ['norm', 'WFIRST_WFI.R062.dat'],
    'RomanZ': ['norm', 'WFIRST_WFI.Z087.dat'],
    'RomanY': ['norm', 'WFIRST_WFI.Y106.dat'],
    'RomanJ': ['norm', 'WFIRST_WFI.J129.dat'],
    'RomanH': ['norm', 'WFIRST_WFI.H158.dat'],
    'RomanF': ['norm', 'WFIRST_WFI.F184.dat'],
}




def get_magmatrix_from_spectra(filenames, angles, bandnames,
    redshift=0):

    # Set up KN properties dataframe
    knprops = pd.DataFrame(columns=['angle','morph','wind','md','vd','mw','vw'])

    lightcurve_collection = []
    count = 0

    fr = filereaders.LANLFileReader()


    for i, filename in enumerate(filenames):

        print(f'Reading file {i}: {filename}')
        # For each angle
        for angle_col in angles:
            spectra = fr.read_spectra(filename, 
                angle=angle_col)


            # Extract properties from filename
            fileprops = fr.get_knprops_from_filename(filename)

            # Report angle in degrees to knprops
            fileprops_angle = fileprops.copy()
            fileprops_angle['angle'] = angle_col
            knprops = knprops.append(fileprops_angle,
                ignore_index=True)


            lightcurves_per_band = None
            for j, bandname in enumerate(bandnames):

                # Make a lightcurve from the band
                lc = observations.LightCurve(spectra=spectra, 
                    band=bands[bandname], redshift=redshift)
                lightcurve = pd.DataFrame({'time': lc.times.value,
                    bandname: lc.magnitudes.value})

                # Combine magnitudes for each band
                if lightcurves_per_band is None:
                    lightcurves_per_band = lightcurve
                else:
                    lightcurves_per_band = pd.merge(lightcurves_per_band,
                        lightcurve, on='time')

            # Combine magnitudes for each angle
            lightcurve_collection.append(lightcurves_per_band)
            count += 1

    # Combine all magnitudes
    lightcurves = pd.concat(lightcurve_collection, keys=np.arange(count))

    return matrix.MagMatrix(lightcurves.drop(columns=['time']),
        bandnames=bandnames, times=lightcurves['time'],
        knprops=knprops, time_units=u.day, mag_units=u.ABmag)





if __name__ == '__main__':

    # Input parameters
    parser = argparse.ArgumentParser()

    # Base directory
    parser.add_argument('--data-dir', type=str,
        default='/Users/r349989/Documents/kilonovae/data/kn_sim_cube1.2/')
        #default='/Users/r349989/Documents/kilonovae/data/composition_sensitivity/SA1_mvye/')

    # Output directory
    parser.add_argument('-o', '--out-dir', type=str, default='kn_sim_cube1.2/')

    # Filter directory
    parser.add_argument('--filter-dir', type=str,
        default='/Users/r349989/Documents/kilonovae/data/filters/')
    parser.add_argument('-f', '--filters', nargs='+', type=str)

    # Set number of every other angle to select
    parser.add_argument('--angle-factor', type=int, default=54)

    parser.add_argument('-a', '--angles', nargs='+', type=int)

    # Provide distance to kilonova
    parser.add_argument('--redshift', type=float, default=0.0098)

    args = parser.parse_args()

    # Read each filter
    fr = filereaders.FileReader()
    fr_tab = filereaders.TabFileReader()

    bands = {}
    #bands['GeminiR'] = fr.read_band('filters/Gemini_GMOS-N.r.dat', bandname='GeminiR', wl_units=u.Angstrom)
    for bandname in args.filters:
        # Select band object
        filetype, filename = band_files[bandname]

        filename = f'{args.filter_dir}{filename}'

        # Store the band
        if filetype == 'norm':
            bands[bandname] = fr.read_band(filename, 
                bandname=bandname, wl_units=u.Angstrom)
        elif filetype == 'tab':
            bands[bandname] = fr_tab.read_band(filename,
                bandname=bandname, wl_units=u.Angstrom)


    # Get bandnames
    bandnames = bands.keys()

    # Set angles of interest
    if args.angles is None:
        angles = np.arange(0, 54, args.angle_factor)
        filename_extension = ''
    else:
        angles = args.angles
        filename_extension = f"{('_').join([str(i) for i in angles])}"

    # Include bands in name
    filename_extension += f"_{('_').join([str(i) for i in bandnames])}"
    print(angles)

    # Prepare filenames --FIXME hardcoding
    #filenames = glob.glob(f'{args.data_dir}SA1_m*_v*_Ye*_spec_*.dat')
    filenames = glob.glob(f'{args.data_dir}Run_T*_dyn_all_lanth_wind*_all_md*_vd*_mw*_vw*_spec*.dat')

    print(f'Number of files: {len(filenames)}')

    redshift = args.redshift
    print(redshift)

    # Compute magmatrix
    magmatrix = get_magmatrix_from_spectra(filenames, 
        angles, bandnames, redshift)

    # Store magmatrix as pickle
    filename_extension += f'_z{redshift}.pkl'
    magmatrix.knprops.to_pickle(f'{args.out_dir}knprops{filename_extension}')
    magmatrix.matrix.to_pickle(f'{args.out_dir}magmatrix{filename_extension}')
    magmatrix.times.to_pickle(f'{args.out_dir}times{filename_extension}')

